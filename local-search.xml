<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言的基本语法</title>
    <link href="/2023/12/21/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/12/21/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="🗿-基本语法"><a href="#🗿-基本语法" class="headerlink" title="🗿 基本语法"></a>🗿 基本语法</h1><h2 id="🗝️-C的令牌（Token）"><a href="#🗝️-C的令牌（Token）" class="headerlink" title="🗝️ C的令牌（Token）"></a>🗝️ C的令牌（Token）</h2><div class="note note-info">            <p>在C语言中，令牌是构成程序的基本元素，可以理解为最小的语法单位。C语言中的令牌包括关键字、标识符、常量、字符串文字、运算符和特殊符号等。</p>          </div><ul><li><strong>关键字（Keywords）：</strong>C语言中有一些具有特殊含义的单词，它们是语言的一部分，不能用作标识符。例如，int、if、else等。</li><li><strong>标识符（Identifiers）：</strong>标识符是由字母、数字和下划线组成的名称，用于标识变量、函数等。标识符需要遵循一些命名规则，比如不能以数字开头。</li><li><strong>常量（Constants）：</strong>常量是固定的值，分为整数常量、浮点数常量、字符常量等。</li><li><strong>字符串文字（String Literals）：</strong>字符串文字是由字符组成的序列，用双引号括起来。</li><li><strong>运算符（Operators）：</strong>运算符用于执行各种操作，如加法、减法、乘法、除法等。</li><li><strong>特殊符号（Special Symbols）：</strong>括花括号{}，方括号[]，括号()，分号;等。</li></ul><h2 id="📜-注释"><a href="#📜-注释" class="headerlink" title="📜 注释"></a>📜 注释</h2><p>C语言有两种注释方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 单行注释</span><br><br><span class="hljs-comment">/* 单行注释 */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  多行注释</span><br><span class="hljs-comment">  多行注释</span><br><span class="hljs-comment">  多行注释</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>注意：不能在注释内嵌套注释，注释也不能出现在字符串或字符值中</p><h2 id="🖇️-标识符"><a href="#🖇️-标识符" class="headerlink" title="🖇️ 标识符"></a>🖇️ 标识符</h2><p>C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。</p><ul><li><em><strong>以字母<code>A-Z</code>或<code>a-z</code>或下划线<code>_</code>开始</strong></em></li><li><em><strong>只能由字母、数字、下划线组成</strong></em></li><li><em><strong>不允许出现标点符号，比如@、$和%等</strong></em></li><li><em><strong>C语言是区分大小写的编程语言</strong></em></li></ul><h2 id="📌-关键字"><a href="#📌-关键字" class="headerlink" title="📌 关键字"></a>📌 关键字</h2><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>auto</td><td>声明自动变量</td></tr><tr><td>break</td><td>跳出当前循环</td></tr><tr><td>case</td><td>开关语句分支</td></tr><tr><td>char</td><td>声明字符型变量或函数返回值类型</td></tr><tr><td>const</td><td>定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变</td></tr><tr><td>continue</td><td>结束当前循环，开始下一轮循环</td></tr><tr><td>default</td><td>开关语句中的”其它”分支</td></tr><tr><td>do</td><td>循环语句的循环体</td></tr><tr><td>double</td><td>声明双精度浮点型变量或函数返回值类型</td></tr><tr><td>else</td><td>条件语句否定分支（与 if 连用）</td></tr><tr><td>enum</td><td>声明枚举类型</td></tr><tr><td>extern</td><td>声明变量或函数是在其它文件或本文件的其他位置定义</td></tr><tr><td>float</td><td>声明浮点型变量或函数返回值类型</td></tr><tr><td>for</td><td>一种循环语句</td></tr><tr><td>goto</td><td>无条件跳转语句</td></tr><tr><td>if</td><td>条件语句</td></tr><tr><td>int</td><td>声明整型变量或函数</td></tr><tr><td>long</td><td>声明长整型变量或函数返回值类型</td></tr><tr><td>register</td><td>声明寄存器变量</td></tr><tr><td>return</td><td>子程序返回语句（可以带参数，也可不带参数）</td></tr><tr><td>short</td><td>声明短整型变量或函数</td></tr><tr><td>signed</td><td>声明有符号类型变量或函数</td></tr><tr><td>sizeof</td><td>计算数据类型或变量长度（即所占字节数）</td></tr><tr><td>static</td><td>声明静态变量</td></tr><tr><td>struct</td><td>声明结构体类型</td></tr><tr><td>switch</td><td>用于开关语句</td></tr><tr><td>typedef</td><td>用以给数据类型取别名</td></tr><tr><td>unsigned</td><td>声明无符号类型变量或函数</td></tr><tr><td>union</td><td>声明共用体类型</td></tr><tr><td>void</td><td>声明函数无返回值或无参数，声明无类型指针</td></tr><tr><td>volatile</td><td>说明变量在程序执行中可被隐含地改变</td></tr><tr><td>while</td><td>循环语句的循环条件</td></tr></tbody></table><h2 id="🕸️-C语言中的空格"><a href="#🕸️-C语言中的空格" class="headerlink" title="🕸️ C语言中的空格"></a>🕸️ C语言中的空格</h2><p>只包含空格的行，被称为空白行，可能带有注释，C编译器会完全忽略它。</p><p>在C中，空格用于描述空白符、制表符、换行符和注释。空格分隔语句的各个部分，让编译器能识别语句中的某个元素（比如<code>int</code>）在哪里结束，下一个元素在哪里开始。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> number1 = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 局部变量</span><br><span class="hljs-type">int</span> number2 = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 局部变量</span><br><span class="hljs-type">int</span> sum = number1 + number2;  <span class="hljs-comment">// 局部变量</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>其中<code>int number1</code>间的空格是为了分割语句，同样的还有<code>int number2</code>和<code>int sum</code>。</p><p>而<code>number1 = 0</code>间的空格是为了增加代码可读性，适当加一些空格。一般会间隔一个空格，同样的还有<code>number2 = 0</code>、<code>sum = number1 + number2</code>和<code>  // 局部变量</code>。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>C Language</category>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C Language</tag>
      
      <tag>Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言的程序结构</title>
    <link href="/2023/12/21/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"/>
    <url>/2023/12/21/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="🗿-程序结构"><a href="#🗿-程序结构" class="headerlink" title="🗿 程序结构"></a>🗿 程序结构</h1><h2 id="📚-Introduce"><a href="#📚-Introduce" class="headerlink" title="📚  Introduce"></a>📚  Introduce</h2><p>在C语言中，程序主要包括：</p><ul><li><a href="#header">头文件（Header Files）</a></li><li><a href="#preprocessor">预处理指令（Preprocessor Directives）</a></li><li><a href="#global">全局声明（Global Declarations）</a></li><li><a href="#main">main函数（main function）</a></li><li><a href="#local">局部声明（Local Declarations）</a></li><li><a href="#statement">语句和表达式（Statements and Expressions）</a></li><li><a href="#control">控制结构（Control Structures）</a></li><li><a href="#definition">函数定义（Function Definitions）</a></li></ul><h2 id="📖-Code"><a href="#📖-Code" class="headerlink" title="📖 Code"></a>📖 Code</h2><blockquote><p>下面是一个简单的C语言程序示例，先通过示例简单了解：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  <span class="hljs-comment">// 预处理指令和头文件</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;  <span class="hljs-comment">// 函数原型声明 函数声明</span><br><br><span class="hljs-type">int</span> globalVar = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 全局变量声明即全局声明</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>  <span class="hljs-comment">// main函数</span><br>&#123;<br>    <span class="hljs-type">int</span> localVar = <span class="hljs-number">5</span>;  <span class="hljs-comment">// 局部变量声明即局部声明</span><br><br>    greet();  <span class="hljs-comment">// 调用函数</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sum: %d\n&quot;</span>, globalVar + localVar);  <span class="hljs-comment">// 执行语句和表达式</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 函数定义</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World!\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="📝-Explain"><a href="#📝-Explain" class="headerlink" title="📝 Explain"></a>📝 Explain</h2><div class="note note-info">            <p><a id="header" style="text-decoration: none;color: inherit;">头文件（Header Files）</a></p>          </div><p>头文件包含了一些预处理指令，用于引入系统库或自定义库的声明。例如，<code>#include &lt;stdio.h&gt;</code>用于引入标准输入输出库。</p><div class="note note-info">            <p><a id="preprocessor" style="text-decoration: none;color: inherit;">预处理指令（Preprocessor Directives）</a></p>          </div><p>在头文件中，通常包含一些预处理指令，如<code>#define</code>、<code>#ifdef</code>、<code>#ifndef</code>等。这些指令在编译前由预处理器处理。</p><div class="note note-info">            <p><a id="gloal" style="text-decoration: none;color: inherit;">全局声明（Global Declarations）</a></p>          </div><p>在主函数之外声明全局变量和函数原型。全局变量和函数原型的声明可以放在头文件中。</p><div class="note note-info">            <p><a id="main" style="text-decoration: none;color: inherit;">main函数（main function）</a></p>          </div><p>所有的C程序都必须包含一个<code>main</code>函数，它是程序的入口。程序从<code>main</code>函数开始执行。</p><div class="note note-info">            <p><a id="local" style="text-decoration: none;color: inherit;">局部声明（Local Declarations）</a></p>          </div><p>在<code>main</code>函数或其他函数内部，可以声明局部变量。局部变量只在声明它的函数内部可见。</p><div class="note note-info">            <p><a id="statement" style="text-decoration: none;color: inherit;">语句和表达式（Statements and Expressions）</a></p>          </div><p>C程序由一系列语句和表达式组成。语句是执行某种操作的代码块，而表达式则是产生一个值的代码片段。</p><div class="note note-info">            <p><a id="control" style="text-decoration: none;color: inherit;">控制结构（Control Structures）</a></p>          </div><p>C语言提供了一些控制结构，如条件语句（<code>if</code>、<code>else</code>）、循环语句（<code>for</code>、<code>while</code>）和跳转语句（<code>break</code>、<code>continue</code>、<code>return</code>）。</p><div class="note note-info">            <p><a id="definition" style="text-decoration: none;color: inherit;">函数定义（Function Definitions）</a></p>          </div><p>除了<code>main</code>函数之外，程序可能包含其他自定义函数。函数的定义包括函数名、返回类型、参数列表和函数体。</p><h2 id="⌨️-Create"><a href="#⌨️-Create" class="headerlink" title="⌨️ Create"></a>⌨️ Create</h2><p>通过以下步骤可以完成一个源程序的编写、编译并运行：</p><ol><li><p>打开一个文本编辑器，编写代码。</p></li><li><p>保存文件，文件以<code>.c</code>为拓展名。</p></li><li><p>打开终端（terminal），使用<code>cd</code>命令进入源代码文件所在目录。</p></li><li><p>输入<code>gcc 文件名.c</code>，回车确定，编译代码。</p></li><li><p>如果代码没有错误，会生成<code>a.out</code>可执行文件。（在Windows中，生成的是a.exe。可执行文件默认名称为a）</p></li><li><p>输入<code>./a.out</code>执行文件。</p></li></ol><div class="note note-info">            <p>这部分会涉及到如何使用终端命令，大家会在<code>Linux</code>的学习中了解更多。</p>          </div><ul><li>使用<code>gcc 文件名.c -o 文件名.out</code>可以自定义可执行文件名称。</li><li>也可以使用<code>gcc 文件名1.c 文件名2.c -o 文件名.out</code>编译多个文件。</li></ul><h3 id="🛠️-Compile"><a href="#🛠️-Compile" class="headerlink" title="🛠️ Compile"></a>🛠️ Compile</h3><p>在以上步骤中，有关<code>gcc</code>命令的作用就是编译源码，生成可执行文件。</p><blockquote><p><code>gcc</code> 是 GNU Compiler Collection（GNU编译器集合）的缩写，是一套开源的编程语言编译器。它支持多种编程语言，其中最为广泛使用的是 C、C++ 和 Fortran。下面是 <code>gcc</code>编译 C 文件的基本步骤：</p><ol><li><strong>预处理（Preprocessing）：</strong>首先，<code>gcc</code> 使用预处理器（通常是 <code>cpp</code>，C Preprocessor）对源文件进行预处理。预处理器执行一些预处理指令，例如 <code>#include</code> 将头文件内容嵌入源文件，<code>#define</code> 进行宏替换，以及条件编译等。</li><li><strong>编译（Compilation）：</strong>经过预处理的源文件被送入编译器，对其进行词法分析、语法分析和语义分析，生成相应的中间代码（通常是汇编代码）。</li><li><strong>汇编（Assembly）：</strong>生成的中间代码被汇编成目标文件。目标文件包含了特定硬件体系结构的机器代码。</li><li><strong>链接（Linking）：</strong>如果程序包含多个源文件，编译器会生成多个目标文件。链接器（<code>ld</code>）将这些目标文件以及可能的库文件链接在一起，生成最终的可执行文件。链接器解决符号引用，合并代码和数据段，并生成程序入口地址。</li><li><strong>生成可执行文件（Executable）：</strong>最后，链接器生成的可执行文件包含了程序的机器代码和必要的元信息，可以被操作系统加载并执行。</li></ol></blockquote><p>在命令行中，一般使用以下命令来编译一个简单的 C 程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc source_file.c -o output_executable<br></code></pre></td></tr></table></figure><h3 id="⚙️-Execute"><a href="#⚙️-Execute" class="headerlink" title="⚙️ Execute"></a>⚙️ Execute</h3><h4 id="在Linux和MacOS上执行"><a href="#在Linux和MacOS上执行" class="headerlink" title="在Linux和MacOS上执行"></a>在<code>Linux</code>和<code>MacOS</code>上执行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">其中，executable_name 是你的可执行文件的名称</span><br>./executable_name<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">确保在执行前已经给予执行权限</span><br>chmod +x executable_name<br></code></pre></td></tr></table></figure><h4 id="在Windows上执行"><a href="#在Windows上执行" class="headerlink" title="在Windows上执行"></a>在<code>Windows</code>上执行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">executable_name.exe<br></code></pre></td></tr></table></figure><p>或双击exe文件</p>]]></content>
    
    
    <categories>
      
      <category>C Language</category>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C Language</tag>
      
      <tag>Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C Language Says Hello World</title>
    <link href="/2023/12/18/CHelloWorld/"/>
    <url>/2023/12/18/CHelloWorld/</url>
    
    <content type="html"><![CDATA[<h1 id="🗿Hello-World"><a href="#🗿Hello-World" class="headerlink" title="🗿Hello World!"></a>🗿Hello World!</h1><blockquote><p>笔者会先展示代码，再分析它的构成。我们即将踏进一个伟大编程语言的世界！</p></blockquote><h2 id="📖-Code"><a href="#📖-Code" class="headerlink" title="📖 Code"></a>📖 Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">/*Here is my code*/</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="📝-Explain"><a href="#📝-Explain" class="headerlink" title="📝 Explain"></a>📝 Explain</h2><ol><li><p><code>#include&lt;stdio.h&gt;</code></p><ul><li><code>#include</code>是一个预处理命令，用来引入头文件</li><li><code>stdio.h</code>是一个头文件（标准输入输出文件）</li></ul><p> 简单来说，头文件相当于一个工具箱，我们选择需要使用的工具箱，这样就可以在我们之后的工作（代码）中进行使用</p></li><li><p><code>int main() &#123;&#125;</code></p><ul><li><code>int</code>表示该<code>main()</code>函数的返回类型是整型数据，在数据类型以及函数章节会详细介绍。</li><li><code>main()</code>表示一个名为<code>main</code>的函数，在函数章节会函数章节会详细介绍。</li><li><code>&#123;&#125;</code>表示函数的代码块，描述的是函数的功能</li></ul><p> &#x3D;&#x3D;提醒：在C语言中，所有的程序都要包含<code>main()</code>函数，代码从<code>main</code>函数执行。&#x3D;&#x3D;</p></li><li><p><code>/*Here is my code*/</code></p><ul><li><code>/**/</code>包含的是注释说明，程序不会执行，可以有效提高代码的可读性。</li></ul></li><li><p><code>printf(&quot;Hello World!\n&quot;);</code></p><ul><li><p><code>printf()</code>函数在<code>stdio.h</code>头文件中声明，用于格式化输出到屏幕。</p></li><li><p><code>&quot;Hello World!\n&quot;</code>是一串字符串，<code>\n</code>是转义字符，表示换行。</p></li><li><p>在C语言中，每个语句都要使用语句结束符（分号<code>;</code>）作为结束标志。</p></li><li><p><code>retrun 0;</code>对应返回类型。在这里，返回类型是<code>int</code>，所以返回一个0表示退出程序。</p></li></ul></li></ol><h2 id="📽️-History"><a href="#📽️-History" class="headerlink" title="📽️ History"></a>📽️ History</h2><p>C语言是一门通用的、过程式编程语言，由美国计算机科学家Dennis Ritchie于1972年至1973年之间在贝尔实验室（Bell Labs）设计和实现。以下是C语言的主要历史里程碑：</p><ol><li><strong>起源和发展：</strong> C语言的设计始于1969年，当时Dennis Ritchie和Ken Thompson在贝尔实验室为新的Unix操作系统开发一种新的高级编程语言。C语言是由B语言演变而来，而B语言又是由BCPL语言演变而来。因此，C语言继承了一些B语言的特性，但也引入了新的概念和语法。</li><li><strong>发布：</strong> C语言首次正式亮相是在1972年，当时Dennis Ritchie与Brian Kernighan合作，在《贝尔系统技术杂志》上发表了一篇名为《The C Programming Language》的文章，介绍了C语言的基本概念和语法。</li><li><strong>C语言的标准化：</strong> 随着C语言的发展，为了促进跨平台和可移植性，于1983年发布了第一个C语言标准，即ANSI C（American National Standards Institute C）。后来，国际标准化组织（ISO）也发布了与ANSI C兼容的标准，被称为ISO C。</li><li><strong>流行和广泛应用：</strong> 由于其简洁、高效和可移植的特性，C语言在计算机科学领域变得非常流行。它成为了许多系统软件、嵌入式系统和底层编程的首选语言。许多其他编程语言（如C++、Objective-C、C#等）都受到了C语言的影响。</li><li><strong>发展为C++：</strong> 在C语言的基础上，Bjarne Stroustrup于1983年推出了C++，将面向对象编程的概念引入了C语言，使之成为一门更为强大和灵活的编程语言。</li></ol><p>C语言的影响深远，它不仅是许多其他编程语言的基础，而且仍然在系统编程、嵌入式系统和底层开发领域保持着强大的地位。</p>]]></content>
    
    
    <categories>
      
      <category>C Language</category>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C Language</tag>
      
      <tag>Programming</tag>
      
      <tag>Hello World</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/18/HexoHelloWorld/"/>
    <url>/2023/12/18/HexoHelloWorld/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
