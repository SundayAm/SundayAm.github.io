<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SundayAm&#39;s Blog</title>
  <icon>http://example.com/icon.png</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-28T09:41:25.688Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Sunday Am</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言的程序控制（判断）</title>
    <link href="http://example.com/2023/12/27/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%EF%BC%88%E5%88%A4%E6%96%AD%EF%BC%89/"/>
    <id>http://example.com/2023/12/27/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%EF%BC%88%E5%88%A4%E6%96%AD%EF%BC%89/</id>
    <published>2023-12-27T15:49:55.000Z</published>
    <updated>2023-12-28T09:41:25.688Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🔧 程序控制</p><p>程序控制有以下两种：</p><ol><li><a href="../C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%EF%BC%88%E5%88%A4%E6%96%AD%EF%BC%89"><strong>判断：</strong> 通过判断条件是真是假，来执行相应的语句</a></li><li><a href="../C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%EF%BC%88%E5%BE%AA%E7%8E%AF%E4%BD%93%EF%BC%89"><strong>循环体：</strong> 通过条件限制，来循环执行循环体内的语句</a></li></ol></blockquote><div class="note note-primary">            <p>在C 语言中，任何<strong>非零</strong>和<strong>非空</strong>的值假定为 true，把<strong>零</strong>或<strong>null（空）</strong> 假定为 false。</p>          </div><h1 id="︎-判断"><a class="markdownIt-Anchor" href="#︎-判断"></a> ✔︎/✘ 判断</h1><p>判断语句主要有以下类型：</p><ul><li>if语句</li><li>if…else语句</li><li>if…else if…else语句</li><li>嵌套if语句</li><li>switch语句</li><li>嵌套switch语句</li><li><code>? : </code>三元运算符</li></ul><h2 id="if语句"><a class="markdownIt-Anchor" href="#if语句"></a> 📌 if语句</h2><pre><code class=" mermaid">---title: if语句---flowchart LRA(fa:fa-play begin) --&gt; B&#123;条件&#125;B --&gt;|true| C(条件代码)C --&gt; D(end)B --&gt;|false| D</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 括号内‘a == 0’就是判断条件，若是成立，即为真，则执行&#123;&#125;内容</span><br>    <span class="hljs-comment">// 若是不成立，即为假，则跳过&#123;&#125;，执行下面的语句</span><br>    <span class="hljs-comment">// 在这里，条件‘a == 0’成立，所以执行&#123;&#125;内语句，输出‘a = 0;’</span><br>    <span class="hljs-keyword">if</span>(a == <span class="hljs-number">0</span>) <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = 0;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分支语句ifelse"><a class="markdownIt-Anchor" href="#分支语句ifelse"></a> 📌 分支语句（if…else）</h2><pre><code class=" mermaid">---title: if..else 语句---flowchart LRA(fa:fa-play begin) --&gt; B&#123;条件&#125;B --&gt;|true| C(条件代码1)C --&gt; D(end)B --&gt;|false| E(条件代码2)E --&gt; D</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 与if语句相比，多了else&#123;&#125;</span><br>    <span class="hljs-comment">// 如果if的条件不成立，则执行else&#123;&#125;内的语句</span><br>    <span class="hljs-comment">// 在这里，a的值为1，if条件不成立，所以执行else内的语句，输出‘a != 0;’</span><br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = 0;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a != 0;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>if…else还有种代码风格</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = 0;\n&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a != 0;\n&quot;</span>);    <br>&#125;<br></code></pre></td></tr></table></figure><p>与代码段中的效果是完全等同的，只是写法不同，目的是为了美观</p></blockquote><h2 id="多分支语句ifelse-ifelse"><a class="markdownIt-Anchor" href="#多分支语句ifelse-ifelse"></a> 📌 多分支语句（if…else if…else）</h2><pre><code class=" mermaid">---title: if..else if..else语句---flowchart LRA(fa:fa-play begin) --&gt; B&#123;条件2&#125;B --&gt;|true| C(条件代码1)C --&gt; D(end)B --&gt;|false| E&#123;条件2&#125;E --&gt;|true| F(条件代码2)F --&gt; DE --&gt;|false| G&#123;条件3&#125;G --&gt;|true| H(条件代码3)G --&gt;|false| I(条件代码4)H &amp; I --&gt; D</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 与if..else语句相比，多了else if() &#123;&#125;</span><br>    <span class="hljs-comment">// 如果if的条件不成立，会判断else if的条件，若也不成立，则执行else&#123;&#125;内的语句。else if可以多次出现</span><br>    <span class="hljs-comment">// 在这里，a的值为1，if条件不成立，判断else if的条件，成立，所以执行else if内的语句，输出‘a &gt; 0;’，到这里判断已经结束了，不会再判断else</span><br>    <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a &lt; 0;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a &gt; 0;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> (a == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = 0;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="嵌套if语句"><a class="markdownIt-Anchor" href="#嵌套if语句"></a> 📌 嵌套if语句</h2><pre><code class=" mermaid">---title: 嵌套if语句---flowchart LRA(fa:fa-play begin) --&gt; B&#123;条件1&#125;B --&gt;|false| E(条件代码1)E --&gt; D(end)B --&gt;|true| C&#123;条件2&#125;C --&gt;|false| DC --&gt;|true| F(条件代码2)F --&gt; D</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// if (a == 0)是外层判断，是最先执行的，如果条件为真，才会执行内部的语句</span><br>    <span class="hljs-comment">// if (b == 0)是内层判断，只有当外层判断条件为真，才会执行判断</span><br>    <span class="hljs-comment">// 在这里，外层内层条件都为真，所以最终输出‘a = b = 0;’</span><br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = b = 0;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="switch语句"><a class="markdownIt-Anchor" href="#switch语句"></a> 📌 switch语句</h2><pre><code class=" mermaid">---title: switch语句---flowchart LRA(fa:fa-play begin) --&gt; B&#123;条件&#125;B --&gt;|case 1| C(代码块1) --&gt; D(end)B --&gt;|case 2| E(代码块2) --&gt; DB --&gt;|case 3| F(代码块3) --&gt; DB --&gt;|case 4| G(代码块4) --&gt; DB --&gt;|default| H(代码块5) --&gt; D</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// switch语句是，根据()内的值来匹配不同的case，再执行case下的语句。default是匹配除了所列的case外的值</span><br>    <span class="hljs-comment">// switch语句有个特性，如果case下没有break，会接着执行下一个case，直到遇到break或者执行完default。break会在之后的内容中介绍，用于终止判断和循环</span><br>    <span class="hljs-comment">// 在这里a的值为0，首先执行case 0下的语句，由于没有break，所以会接着执行case 1</span><br>    <span class="hljs-comment">// 在case 1中遇到了break，所以跳出switch</span><br>    <span class="hljs-keyword">switch</span> (a)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = 0;\n&quot;</span>);<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = 1;\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a != 0 or 1;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>；<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="嵌套switch语句"><a class="markdownIt-Anchor" href="#嵌套switch语句"></a> 📌 嵌套switch语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// switch(a)是外层switch语句，switch(b)是内层switch语句，位于case 0</span><br>    <span class="hljs-comment">// 外层执行顺序：switch(a) -&gt; case 0 -&gt; printf -&gt; switch(b) -&gt; break -&gt; return 0</span><br>    <span class="hljs-comment">// 内层执行顺序：switch(b) -&gt; case 0 -&gt; break</span><br>    <span class="hljs-keyword">switch</span> (a)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = 0\t&quot;</span>);<br>            <span class="hljs-keyword">switch</span> (b)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = 0\n&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = 1\n&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = 1\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三元运算符"><a class="markdownIt-Anchor" href="#三元运算符"></a> 📌 三元运算符</h2><blockquote><p>三元运算符实现的是<code>if..else</code>的逻辑</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// if..else</span><br><span class="hljs-keyword">if</span> (a == b) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = b\n&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a != b\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// ? :</span><br>(a == b) ? <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = b\n&quot;</span>):<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a != b\n&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>在上述代码中，<code>if..else</code>实现的是如果<code>a == b</code>则输出<code>a = b</code>，如果<code>a != b</code>（<code>else</code>的实际条件）则输出<code>a != b</code></p><p><code>? :</code>实现的是相同的功能</p><p>在<code>? :</code>中，<code>(a == b)</code>是条件，<code>printf(&quot;a = b\n&quot;)</code>是判断为真的执行语句，`printf(“a != b\n”)``是判断为假的执行语句</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// ? :的基本结构</span><br>条件 ? 为真的执行语句 : 为假的执行语句;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">C语言的程序控制在本文中包括判断和循环体，程序控制在程序里有着重要的作用，会常常使用它们去实现代码逻辑。在本文中，笔者将会介绍C语言的判断语句。</summary>
    
    
    
    <category term="C Language" scheme="http://example.com/categories/C-Language/"/>
    
    <category term="基础知识" scheme="http://example.com/categories/C-Language/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="C Language" scheme="http://example.com/tags/C-Language/"/>
    
    <category term="Programming" scheme="http://example.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>C语言的运算符</title>
    <link href="http://example.com/2023/12/26/C%E8%AF%AD%E8%A8%80%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://example.com/2023/12/26/C%E8%AF%AD%E8%A8%80%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2023-12-25T16:00:59.000Z</published>
    <updated>2023-12-25T16:00:59.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 📜 运算符</h1><p>C 语言内置了丰富的运算符，并提供了以下类型的运算符：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>杂项运算符</li></ul><h2 id="️-算术运算符"><a class="markdownIt-Anchor" href="#️-算术运算符"></a> ✏️ 算术运算符</h2><ul><li><code>+</code>：加法</li><li><code>-</code>：减法</li><li><code>*</code>：乘法</li><li><code>/</code>：除法</li><li><code>%</code>：取余</li><li><code>++</code>:自增</li><li><code>--</code>:自减</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> sum = x + y;  <span class="hljs-comment">// sum = 15</span><br><span class="hljs-type">int</span> sub = x - y;  <span class="hljs-comment">// sub = -5</span><br><span class="hljs-type">int</span> mul = x * y;  <span class="hljs-comment">// mul = 50</span><br><span class="hljs-type">int</span> div = x / y;  <span class="hljs-comment">// div = 0.5</span><br><span class="hljs-type">int</span> rem = x % y;  <span class="hljs-comment">// rem = 5</span><br><br><span class="hljs-comment">// 在这里假设每次进行运算前，x的值都为5</span><br><span class="hljs-type">int</span> z = <span class="hljs-number">0</span>;<br>z = x++;  <span class="hljs-comment">// z = 5, x = 6，先将x的值赋予z，再执行x+1</span><br>z = ++x;  <span class="hljs-comment">// z = 6, x = 6，先执行x+1，再将赋值后的x赋给z</span><br><br>z = x--;  <span class="hljs-comment">// z = 5, x = 4，先将x的值赋予z，再执行x-1</span><br>z = --x;  <span class="hljs-comment">// z = 4, x = 4，先执行x-1，再将赋值后的x赋给z</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>在C语言中，<code>++</code> 运算符有两种形式：前缀递增和后缀递增。</p><ol><li><p><strong>前缀递增 (<code>++y</code>)：</strong></p><ul><li><p>在表达式被计算之前，变量 <code>y</code> 的值会先递增。</p></li><li><p>表达式的值是递增后的值。</p></li></ul></li><li><p><strong>后缀递增 (<code>y++</code>)：</strong></p><ul><li>在表达式被计算之后，变量 <code>y</code> 的值会递增。</li><li>表达式的值是递增前的值。</li></ul></li></ol><p>因此，<code>x = ++y;</code> 中，<code>y</code> 的值在表达式计算之前递增，所以 <code>x</code> 被赋值为递增后的值，导致 <code>x</code> 和 <code>y</code> 的值相同。</p><p>而在 <code>x = y++;</code> 中，<code>y</code> 的值在表达式计算之后递增，所以 <code>x</code> 被赋值为递增前的值，导致 <code>x</code> 和 <code>y</code> 的值不同。</p><p>总的来说，前缀递增和后缀递增的区别在于递增的时机，这直接影响到表达式的值和相关变量的最终值。</p>          </div><h2 id="️-关系运算符"><a class="markdownIt-Anchor" href="#️-关系运算符"></a> ✏️ 关系运算符</h2><ul><li><code>==</code>：等于</li><li><code>!=</code>：不等于</li><li><code>&lt;</code>：小于</li><li><code>&gt;</code>：大于</li><li><code>&lt;=</code>：小于等于</li><li><code>&gt;=</code>：大于等于</li></ul><div class="note note-primary">            <p>在C语言中，没有bool类型，0表示错，1表示对。（bool类型只有两个值，true和false，表示对错。</p>          </div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">10</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x == y is %d\n&quot;</span>, x == y);  <span class="hljs-comment">// x == y is 0</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x != y is %d\n&quot;</span>, x != y);  <span class="hljs-comment">// x != y is 1</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x &lt; y is %d\n&quot;</span>, x &lt; y);  <span class="hljs-comment">// x &lt; y is 1</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x &gt; y is %d\n&quot;</span>, x &gt; y);  <span class="hljs-comment">// x &gt; y is 0</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x &lt;= y is %d\n&quot;</span>, x &lt;= y);  <span class="hljs-comment">// x &lt;= y is 1</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x &gt;= y is %d\n&quot;</span>, x &gt;= y);  <span class="hljs-comment">// x &gt;= y is 0</span><br></code></pre></td></tr></table></figure><h2 id="️-逻辑运算符"><a class="markdownIt-Anchor" href="#️-逻辑运算符"></a> ✏️ 逻辑运算符</h2><ul><li><code>&amp;&amp;</code>：逻辑与</li><li><code>||</code>：逻辑或</li><li><code>!</code>：逻辑非</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">1</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x &amp;&amp; y is %d\n&quot;</span>, x &amp;&amp; y);  <span class="hljs-comment">// x &amp;&amp; y is 0</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x || y is %d\n&quot;</span>, x || y);  <span class="hljs-comment">// x || y is 1</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;!x is %d\t !y is %d&quot;</span>, !x, !y);  <span class="hljs-comment">// !x is 1   !y is 0</span><br></code></pre></td></tr></table></figure><h2 id="️-位运算符"><a class="markdownIt-Anchor" href="#️-位运算符"></a> ✏️ 位运算符</h2><ul><li><code>&amp;</code>：按位与，同1为1</li><li><code>|</code>：按位或，有1为1</li><li><code>^</code>：按位异或，同为0，异为1</li><li><code>~</code>：按位取反，0变1，1变0</li><li><code>&lt;&lt;</code>：左移，补0</li><li><code>&gt;&gt;</code>：右移，补0</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 在计算机中，数值都是用二进制表示的，在以后计算机组成原理中会学习啊到该内容。位运算是对二进制数的操作。</span><br><span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;  <span class="hljs-comment">// 二进制表示x：00000101</span><br><span class="hljs-type">int</span> y = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 二进制表示y：00001010</span><br><br><span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>result = x &amp; y;<br><span class="hljs-comment">/* 同1为1</span><br><span class="hljs-comment">0000 0101</span><br><span class="hljs-comment">0000 1010</span><br><span class="hljs-comment">0000 0000 结果为0</span><br><span class="hljs-comment">*/</span><br><br>result = x | y;<br><span class="hljs-comment">/* 有1为1</span><br><span class="hljs-comment">0000 0101</span><br><span class="hljs-comment">0000 1010</span><br><span class="hljs-comment">0000 1111 结果为15</span><br><span class="hljs-comment">*/</span><br><br>result = x ^ y;<br><span class="hljs-comment">/* 同为0，异为1</span><br><span class="hljs-comment">0000 0101</span><br><span class="hljs-comment">0000 1010</span><br><span class="hljs-comment">0000 1111 结果为15</span><br><span class="hljs-comment">*/</span><br><br>result = ~x;<br><span class="hljs-comment">/* 0变1，1变0</span><br><span class="hljs-comment">0000 0101</span><br><span class="hljs-comment">1111 1010 结果为-6</span><br><span class="hljs-comment">*/</span><br><br>result = x &lt;&lt; <span class="hljs-number">1</span>;<br><span class="hljs-comment">/* 左移，补0</span><br><span class="hljs-comment">0000 0101</span><br><span class="hljs-comment">0000 1010 结果为10</span><br><span class="hljs-comment">*/</span><br><br>result = x &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-comment">/* 右移，补0</span><br><span class="hljs-comment">0000 0101</span><br><span class="hljs-comment">0000 0010 结果为2</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="️-赋值运算符"><a class="markdownIt-Anchor" href="#️-赋值运算符"></a> ✏️ 赋值运算符</h2><ul><li><code>=</code>：赋值</li><li><code>+=</code>：加法赋值</li><li><code>-=</code>：减法赋值</li><li><code>*=</code>：乘法赋值</li><li><code>/=</code>：除法赋值</li><li><code>%=</code>：取余赋值</li><li><code>&amp;=</code>：按位与赋值</li><li><code>|=</code>：按位或赋值</li><li><code>^=</code>：按位异或赋值</li><li><code>&lt;&lt;=</code>：左移赋值</li><li><code>&gt;&gt;=</code>：右移赋值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> z = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 和算术运算部分相匹配</span><br><span class="hljs-comment">// 在这里假设每次进行运算前，x的值都为5, y的值都为10</span><br>x = y;  <span class="hljs-comment">// x = y = 10</span><br>x += y;  <span class="hljs-comment">// x = x + y = 15</span><br>x -= y;  <span class="hljs-comment">// x = x - y = -5</span><br>x *= y;  <span class="hljs-comment">// x = x * y = 50</span><br>x /= y;  <span class="hljs-comment">// x = x / x = 0.5</span><br>x %= y;  <span class="hljs-comment">// x = x % y = 5</span><br><br><span class="hljs-comment">// 和位运算部分相匹配</span><br><span class="hljs-comment">// 依然在这里假设每次进行运算前，x的值都为5, y的值都为10</span><br>x &amp;= y;  <span class="hljs-comment">// x = x &amp; y =  0</span><br>x |= y;  <span class="hljs-comment">// x = x | y = 15</span><br>x ^= y;  <span class="hljs-comment">// x = x ^ y = 15</span><br>x &lt;&lt;= z;  <span class="hljs-comment">// x = x &lt;&lt; z = 10</span><br>x &gt;&gt;= z;  <span class="hljs-comment">// x = x &gt;&gt; z = 2</span><br></code></pre></td></tr></table></figure><h2 id="️-杂项运算符"><a class="markdownIt-Anchor" href="#️-杂项运算符"></a> ✏️ 杂项运算符</h2><ul><li><code>sizeof()</code>：返回变量的大小</li><li><code>&amp;</code>：返回变量的地址（指针取址）</li><li><code>*</code>：指向一个变量（指针取值）</li><li><code>? :</code>：三元条件表达式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *ptr = &amp;x;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x&#x27;s size is %zu bytes\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(x));  <span class="hljs-comment">// x&#x27;s size is 4 bytes （就是x的数据类型——int型的size）</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x&#x27;s address is %p\n&quot;</span>, ptr);  <span class="hljs-comment">// x&#x27;s address is 0x16f23f038 (地址是随机的，每次运行都不一样)</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ptr&#x27;s value is %d\n&quot;</span>, *ptr);  <span class="hljs-comment">// ptr&#x27;s value is 5 (==x)</span><br>    <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&#x27;x &gt; y ? x : y&#x27; gets the biger value, the result is %d\n&quot;</span>, x &gt; y ? x : y);  <span class="hljs-comment">// &#x27;x &gt; y ? x : y&#x27; gets the biger value, the result is 10 (==y, y&gt;x)</span><br></code></pre></td></tr></table></figure><h2 id="运算优先级"><a class="markdownIt-Anchor" href="#运算优先级"></a> 📝 运算优先级</h2><ol><li><strong>数调用、数组访问、结构成员选择：</strong><ul><li><code>function()</code></li><li><code>array[index]</code></li><li><code>structure.member</code></li></ul></li><li><strong>一元运算符（右到左）：</strong><ul><li><code>++</code>, <code>--</code>（前缀）</li><li><code>+</code>, <code>-</code>（正负号）</li><li><code>!</code>（逻辑非）</li><li><code>~</code>（按位取反）</li><li><code>sizeof</code>（返回字节大小）</li></ul></li><li><strong>强制类型转换：</strong><ul><li><code>(type) expression</code></li></ul></li><li><strong>乘法、除法、取余：</strong><ul><li><code>*</code>（乘法）</li><li><code>/</code>（除法）</li><li><code>%</code>（取余）</li></ul></li><li><strong>加法和减法：</strong><ul><li><code>+</code>（加法）</li><li><code>-</code>（减法）</li></ul></li><li><strong>位移运算：</strong><ul><li><code>&lt;&lt;</code>（左移）</li><li><code>&gt;&gt;</code>（右移）</li></ul></li><li><strong>关系运算符：</strong><ul><li><code>&lt;</code>, <code>&lt;=</code>（小于、小于等于）</li><li><code>&gt;</code>, <code>&gt;=</code>（大于、大于等于）</li></ul></li><li><strong>相等性运算符：</strong><ul><li><code>==</code>（等于）</li><li><code>!=</code>（不等于）</li></ul></li><li><strong>按位与：</strong><ul><li><code>&amp;</code></li></ul></li><li><strong>按位异或：</strong><ul><li><code>^</code></li></ul></li><li><strong>按位或：</strong><ul><li><code>|</code></li></ul></li><li><strong>逻辑与：</strong><ul><li><code>&amp;&amp;</code></li></ul></li><li><strong>逻辑或：</strong><ul><li><code>||</code></li></ul></li><li><strong>条件运算符（三元运算符）：</strong><ul><li><code>? :</code></li></ul></li><li><strong>赋值运算符（从右到左）：</strong><ul><li><code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>，等</li></ul></li><li><strong>逗号运算符：</strong><ul><li><code>,</code></li></ul></li></ol>]]></content>
    
    
    <summary type="html">这章节将介绍C语言的运算符，运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。通过运算符，我们可以对数值以及内存地址进行运算操作。</summary>
    
    
    
    
    <category term="C Language" scheme="http://example.com/tags/C-Language/"/>
    
    <category term="Programming" scheme="http://example.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/12/25/Hexo%20HelloWorld/"/>
    <id>http://example.com/2023/12/25/Hexo%20HelloWorld/</id>
    <published>2023-12-25T12:54:55.075Z</published>
    <updated>2023-12-25T12:54:55.077Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hello World" scheme="http://example.com/tags/Hello-World/"/>
    
  </entry>
  
  <entry>
    <title>C语言的存储类</title>
    <link href="http://example.com/2023/12/25/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%98%E5%82%A8%E7%B1%BB/"/>
    <id>http://example.com/2023/12/25/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%98%E5%82%A8%E7%B1%BB/</id>
    <published>2023-12-24T16:24:17.000Z</published>
    <updated>2023-12-24T16:24:17.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="存储类"><a class="markdownIt-Anchor" href="#存储类"></a> 🗿 存储类</h1><p>在C语言中，存储类是指变量或函数的存储属性，即它们在内存中的存储位置和生命周期。<br />主要有以下几种存储类：</p><ul><li><strong>auto</strong></li><li><strong>register</strong></li><li><strong>static</strong></li><li><strong>extern</strong></li><li><strong>typedef</strong></li></ul><h2 id="auto存储类"><a class="markdownIt-Anchor" href="#auto存储类"></a> 🍫 auto存储类</h2><p><code>auto</code>存储类是默认的存储类，用于定义局部变量。它在函数内定义的变量默认是auto存储类。</p><blockquote><p>局部变量是只在函数内有效的，这意味着它们在函数开始时被创建，在函数结束时被销毁。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">exampleFunction</span><span class="hljs-params">()</span> <br>&#123;<br>    <span class="hljs-keyword">auto</span> <span class="hljs-type">int</span> localVar;  <span class="hljs-comment">// auto 是默认的存储类</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="register存储类"><a class="markdownIt-Anchor" href="#register存储类"></a> 🍭 register存储类</h2><p><code>register</code>存储类用于定义存储在寄存器中而不是RAM中的局部变量。它提供了对寄存器的直接访问，以加快程序的执行速度。</p><blockquote><p>因为是存储在寄存器中，所以没有内存地址，不能进行‘&amp;’运算。往往用于一些需要频繁访问的变量来提高程序运行效率。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">exampleFunction</span><span class="hljs-params">()</span> <br>&#123;<br>    <span class="hljs-keyword">register</span> <span class="hljs-type">int</span> count;  <span class="hljs-comment">// 请求将变量存储在寄存器中</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="static存储类"><a class="markdownIt-Anchor" href="#static存储类"></a> 🍿 static存储类</h2><p><code>static</code>存储类用于定义局部变量和全局变量。局部变量使用 static 存储类时，其生命周期会延长到整个程序的执行周期,不会在每次它进入和离开作用域时进行创建和销毁。而使用static修饰全局变量时，会使变量的作用域限制在声明它的文件内。全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。</p><blockquote><p>静态变量在程序中只被初始化一次，即使函数被调用多次，该变量的值也不会重置。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">exampleFunction</span><span class="hljs-params">()</span> <br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> localVar;  <span class="hljs-comment">// 局部变量使用 static 存储类</span><br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> globalVar;  <span class="hljs-comment">// 全局变量使用 static 存储类</span><br></code></pre></td></tr></table></figure><h2 id="extern存储类"><a class="markdownIt-Anchor" href="#extern存储类"></a> 🍦 extern存储类</h2><p><code>extern</code>存储类用于提供对全局变量的引用，而这些全局变量存储在其他文件中。当使用 extern 关键字时，不会为变量分配任何存储空间，而只是指示编译器该变量在其他文件中定义。</p><blockquote><p>extern存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 extern时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。<br />当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用extern来得到已定义的变量或函数的引用。<strong>可以这么理解，extern 是用来在另一个文件中声明一个全局变量或函数。</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> globalVar;  <span class="hljs-comment">// 声明全局变量，告诉编译器它在其他文件中定义</span><br></code></pre></td></tr></table></figure><h2 id="typedef存储类"><a class="markdownIt-Anchor" href="#typedef存储类"></a> 🍰 typedef存储类</h2><p><code>typedef</code>存储类用于创建新的数据类型名称。它提供了对数据类型的更直观和更易读的方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Integer;  <span class="hljs-comment">// 使用 typedef 创建新的数据类型 Integer</span><br></code></pre></td></tr></table></figure><p>**这些存储类允许程序员灵活地控制变量的存储位置和生命周期，以满足不同的编程需求。**在实操时会进一步理解，现在可以简单了解。</p>]]></content>
    
    
    <summary type="html">在这篇文章里，笔者将会介绍C语言的存储类。存储类是指变量或函数的存储属性，即它们在内存中的存储位置和生命周期。</summary>
    
    
    
    <category term="C Language" scheme="http://example.com/categories/C-Language/"/>
    
    <category term="基础知识" scheme="http://example.com/categories/C-Language/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="C Language" scheme="http://example.com/tags/C-Language/"/>
    
    <category term="Programming" scheme="http://example.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>C语言的变量和常量</title>
    <link href="http://example.com/2023/12/23/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/"/>
    <id>http://example.com/2023/12/23/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/</id>
    <published>2023-12-23T15:23:11.000Z</published>
    <updated>2023-12-23T15:24:25.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量与常量"><a class="markdownIt-Anchor" href="#变量与常量"></a> 🗿 变量与常量</h1><p>在C语言中，变量和常量是程序中存储和表示数据的两种基本元素。</p><h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 🎬 变量</h2><ol><li><strong>定义：</strong> 变量是一个具有标识符的存储位置，用于存储可变的数据值。变量的名称可以由字母、数字和下划线字符组成。它必须以字母或下划线开头，大写字母和小写字母是不同的。</li><li><strong>声明：</strong> 在使用变量之前，必须先声明它。声明告诉编译器变量的数据类型和标识符，但不分配实际的存储空间。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">type variable_name;</span><br><span class="hljs-comment">type 表示变量的数据类型，可以是整型、浮点型、字符型、指针等，也可以是用户自定义的对象。</span><br><span class="hljs-comment">variable_name 是变量的名称，可以由一个或多个变量的名称组成，多个变量之间用逗号,分隔，变量由字母、数字和下划线组成，且以字母或下划线开头。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> myVariable;  <span class="hljs-comment">// 声明一个整数型变量</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>赋值：</strong> 赋值操作用于将值存储到变量中。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">myVariable = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 将值10赋给myVaribale</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">type variable_name = value;</span><br><span class="hljs-comment">value 是变量的初始值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> newVariable = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 也可以在定义的时候赋值</span><br></code></pre></td></tr></table></figure><ol start="4"><li><strong>使用：</strong> 可以在程序中使用变量的值。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The value of myVariable is %d\n&quot;</span>, myVariable);<br></code></pre></td></tr></table></figure><ol start="5"><li><strong>变量声明补充</strong></li></ol><blockquote><p>变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。(这部分涉及到编译原理，理解不了也不会影响学习，在以后的学习中会逐渐理解)</p><p>变量的声明有两种情况：</p><ul><li><p>1、一种是需要建立存储空间的。例如：<code>int a</code> 在声明的时候就已经建立了存储空间。</p></li><li><p>2、另一种是不需要建立存储空间的，通过使用<code>extern</code>关键字声明变量名而不定义它。 例如：<code>extern int a</code> 其中变量 a 可以在别的文件中定义的。</p></li></ul><p>除非有<code>extern</code>关键字，否则都是变量的定义。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> myVariable;  <span class="hljs-comment">// 声明，也是定义</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> newVaribale;  <span class="hljs-comment">// 声明，不是定义</span><br></code></pre></td></tr></table></figure><h2 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 🎬 常量</h2><ol><li><strong>定义：</strong> 常量是一个固定的数值，其值在程序执行期间不能被修改。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 有两种可以定义常量的方式</span><br><span class="hljs-comment">// 使用 #define 预处理器： #define 可以在程序中定义一个常量，它在编译时会被替换为其对应的值。</span><br><span class="hljs-comment">// #define 常量名 常量值</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI 3.1415926</span><br><br><span class="hljs-comment">// 使用 const 关键字：const 关键字用于声明一个只读变量，即该变量的值不能在程序运行时修改。</span><br><span class="hljs-comment">// const 数据类型 常量名 = 常量值;</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MYCONSTANT = <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><blockquote><p>请注意，把常量定义为<em><strong>大写字母</strong></em>形式，是一个很好的编程习惯。</p></blockquote><ol start="2"><li><strong>使用：</strong> 常量在程序中可以像变量一样使用，但不能被重新赋值。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The value of PI is %f\n&quot;</span>, PI);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The value of myConstant is %d\n&quot;</span>, MYCONSTANT);<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>枚举常量：</strong> 使用枚举类型可以定义一组相关的常量。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span> RED, GREEN, BLUE &#125; colors;<br></code></pre></td></tr></table></figure><blockquote><p>这里的<code>RED</code>,<code>GREEN</code>,和<code>BLUE</code>是枚举常量，它们分别代表0、1、2。在之后的文章里会详细介绍枚举类型<code>enum</code></p></blockquote><p>总体而言，变量用于存储可变的数据，而常量用于表示固定的数值，增强代码的可读性和可维护性。</p><div class="note note-primary">            <p><code>#define</code> 与 <code>const</code>这两种方式都可以用来定义常量，选择哪种方式取决于具体的需求和编程习惯。通常情况下，建议使用<code>const</code>关键字来定义常量，因为它具有类型检查和作用域的优势，而<code>#define</code>仅进行简单的文本替换，可能会导致一些意外的问题。</p><p><strong><code>#define</code>和<code>const</code>的区别</strong></p><ul><li>替换机制：<code>#define</code> 是进行简单的文本替换，而 <code>const</code> 是声明一个具有类型的常量。<code>#define</code> 定义的常量在编译时会被直接替换为其对应的值，而 <code>const</code> 定义的常量在程序运行时会分配内存，并且具有类型信息。</li><li>类型检查：<code>#define</code> 不进行类型检查，因为它只是进行简单的文本替换。而 <code>const</code> 定义的常量具有类型信息，编译器可以对其进行类型检查。这可以帮助捕获一些潜在的类型错误。</li><li>作用域：<code>#define</code> 定义的常量没有作用域限制，它在定义之后的整个代码中都有效。而 <code>const</code> 定义的常量具有块级作用域，只在其定义所在的作用域内有效。</li><li>调试和符号表：使用 <code>#define</code> 定义的常量在符号表中不会有相应的条目，因为它只是进行文本替换。而使用 <code>const</code> 定义的常量会在符号表中有相应的条目，有助于调试和可读性。</li></ul>          </div><h2 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 📚 补充</h2><p><strong>左值和右值</strong></p><ol><li><strong>左值（lvalue - left value）：</strong> ***指向内存位置的表达式被称为左值（lvalue）表达式。***左值可以出现在赋值号的左边或右边。</li><li><strong>右值（rvalue - right value）：</strong> ***术语右值（rvalue）指的是存储在内存中某些地址的数值。***右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li></ol><p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> myVariable = <span class="hljs-number">0</span>;  <span class="hljs-comment">// ✔︎ myVariable是指向内存位置的</span><br><span class="hljs-number">0</span> = <span class="hljs-number">1</span>;  <span class="hljs-comment">// ✘ 0和1是存储在内存中某些地址的数值，只能出现在左边</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">笔者将会在本文章中介绍C语言的变量与常量，可以将它们理解为值的存储区的名称，通过调用名称来取出存储区的值进行操作。</summary>
    
    
    
    <category term="C Language" scheme="http://example.com/categories/C-Language/"/>
    
    <category term="基础知识" scheme="http://example.com/categories/C-Language/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="C Language" scheme="http://example.com/tags/C-Language/"/>
    
    <category term="Programming" scheme="http://example.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>C语言的数据类型</title>
    <link href="http://example.com/2023/12/23/C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2023/12/23/C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-12-22T16:43:34.000Z</published>
    <updated>2023-12-22T16:56:47.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 🗿 数据类型</h1><p>C语言中主要有如下几种类型的数据：</p><ul><li>**基本数据类型：**属于算术类型<ul><li>***整型（int）：***用于表示整数，可以是正数、负数或零</li><li>***字符型（char）：***用于表示单个字符，通常存储ASCII码</li><li>***浮点型（float）：***用于表示带有小数部分的实数</li><li>***双精度浮点型（double）：***提供更高的精度，用于表示更大范围的实数</li></ul></li><li>**枚举类型（enum）：**允许为整数赋予更有意义的名字</li><li>**空类型（void）：**表示没有值的数据类型，常用于函数返回类型和指针类型</li><li>**派生类型：**包括数组、指针和结构体类型<ul><li>***数组（array）：***用于存储相同类型的元素的集合</li><li>***指针（pointer）：***存储变量的地址，提供对内存的直接访问</li><li>***结构体（struct）：***允许将不同类型的变量组合在一起形成一个新的数据类型</li><li>***共用体（union）：***允许在相同的内存位置存储不同类型的数据</li></ul></li></ul><blockquote><p>C语言的灵活性允许程序员根据需要选择适当的数据类型。在使用这些数据类型时，程序员需要考虑数据的范围、精度和内存占用等因素。</p><p><em><strong>数据类型可以表示的数据范围和操作系统位数有关，在“计算机组成原理”中会深入介绍。</strong></em></p><p><code>bit</code>表示比特，<code>byte</code>表示字节，1字节等于8比特。</p></blockquote><h2 id="️-整数类型整型"><a class="markdownIt-Anchor" href="#️-整数类型整型"></a> ✏️ 整数类型（整型）</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">存储大小</th><th style="text-align:center">值的范围</th></tr></thead><tbody><tr><td style="text-align:center">char</td><td style="text-align:center">1byte</td><td style="text-align:center">-2<sup>7</sup> ~ 2<sup>7</sup>-1或0 ～ 2<sup>8</sup>-1</td></tr><tr><td style="text-align:center">unsigned char</td><td style="text-align:center">1byte</td><td style="text-align:center">0 ～ 2<sup>8</sup>-1</td></tr><tr><td style="text-align:center">signed char</td><td style="text-align:center">1byte</td><td style="text-align:center">-2<sup>7</sup> ～ 2<sup>7</sup>-1</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">2或4byte</td><td style="text-align:center">-2<sup>15</sup> ~ 2<sup>15</sup>-1或-2<sup>31</sup> ~ 2<sup>31</sup></td></tr><tr><td style="text-align:center">unsigned int</td><td style="text-align:center">2或4byte</td><td style="text-align:center">0 ~ 2<sup>16</sup>-1或0 ～ 2<sup>31</sup>-1</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2byte</td><td style="text-align:center">-2<sup>15</sup> ~ 2<sup>15</sup>-1</td></tr><tr><td style="text-align:center">unsigned short</td><td style="text-align:center">2byte</td><td style="text-align:center">0 ~ 2<sup>16</sup>-1</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">4byte</td><td style="text-align:center">-2<sup>31</sup> ~ 2<sup>31</sup></td></tr><tr><td style="text-align:center">unsigned long</td><td style="text-align:center">4byte</td><td style="text-align:center">0 ～ 2<sup>31</sup>-1</td></tr></tbody></table><h2 id="️-浮点类型"><a class="markdownIt-Anchor" href="#️-浮点类型"></a> ✏️ 浮点类型</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">存储大小</th><th style="text-align:center">值范围</th><th style="text-align:center">精度</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4byte</td><td style="text-align:center">1.2E-38 ~ 3.4E+38</td><td style="text-align:center">6位有效位</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8byte</td><td style="text-align:center">2.3E-308 ~ 1.7E+308</td><td style="text-align:center">15 位有效位</td></tr><tr><td style="text-align:center">long double</td><td style="text-align:center">16byte</td><td style="text-align:center">3.4E-4932 到 1.1E+4932</td><td style="text-align:center">19 位有效位</td></tr></tbody></table><h2 id="️-空类型void"><a class="markdownIt-Anchor" href="#️-空类型void"></a> ✏️ 空类型（void）</h2><p>空类型指定没有可用的值。通常用于以下三种情况：</p><ul><li>函数返回值为空</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Hello</span><span class="hljs-params">(<span class="hljs-type">char</span> word)</span>;<br></code></pre></td></tr></table></figure><ul><li>函数参数为空</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Hello</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><ul><li>指针指向<code>void</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *hello;<br></code></pre></td></tr></table></figure><h2 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 📝 类型转换</h2><p>类型转换是将一个数据类型的值转换为另一种数据类型的值。</p><p>C语言中有两种类型转换：</p><ul><li><strong>隐式类型转换（自动类型转换）：</strong><ul><li>在表达式中，当不同类型的数据混合在一起时，C语言会自动进行隐式类型转换，将其中的一种类型转换为另一种类型。</li><li>通常，隐式类型转换会遵循一定的规则，例如，将小类型转换为大类型，避免精度丢失。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;  <span class="hljs-comment">// int整型数据</span><br><span class="hljs-type">float</span> b = <span class="hljs-number">2.5</span>;  <span class="hljs-comment">// float浮点型数据</span><br><span class="hljs-type">float</span> result = a + b;  <span class="hljs-comment">// int -&gt; float (float类型更大)</span><br></code></pre></td></tr></table></figure><ul><li><strong>显式类型转换（强制类型转换）：</strong><ul><li>程序员可以使用强制类型转换来显式地将一个数据类型转换为另一个数据类型，这通常用于需要更精确控制类型转换的情况。</li><li>使用强制类型转换时，将目标类型放在要转换的值之前，并使用括号括起来。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> pi = <span class="hljs-number">3.141592653589793</span>;  <span class="hljs-comment">// float浮点型数据</span><br><span class="hljs-type">int</span> pi_int = (<span class="hljs-type">int</span>)pi; <span class="hljs-comment">// 强制转换为int整型数据</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>在进行显式类型转换时，需要谨慎处理，因为它可能导致精度丢失或其他问题。确保了解源类型和目标类型之间的差异，并在转换时谨慎使用。</p>          </div><p><em><strong>总体而言，隐式类型转换在某些情况下会更方便，但在需要精确控制的情况下，显式类型转换是更好的选择。</strong></em></p>]]></content>
    
    
    <summary type="html">笔者将会在本文章中介绍C语言的数据类型，其用于声明不同类型的变量、常量和函数的一个广泛的系统，是在学习使用C语言编程前重要的基础知识。</summary>
    
    
    
    <category term="C Language" scheme="http://example.com/categories/C-Language/"/>
    
    <category term="基础知识" scheme="http://example.com/categories/C-Language/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="C Language" scheme="http://example.com/tags/C-Language/"/>
    
    <category term="Programming" scheme="http://example.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>C语言的基本语法</title>
    <link href="http://example.com/2023/12/21/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2023/12/21/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2023-12-21T02:55:44.000Z</published>
    <updated>2023-12-21T03:31:36.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 🗿 基本语法</h1><h2 id="️-c的令牌token"><a class="markdownIt-Anchor" href="#️-c的令牌token"></a> 🗝️ C的令牌（Token）</h2><div class="note note-info">            <p>在C语言中，令牌是构成程序的基本元素，可以理解为最小的语法单位。C语言中的令牌包括关键字、标识符、常量、字符串文字、运算符和特殊符号等。</p>          </div><ul><li>**关键字（Keywords）：**C语言中有一些具有特殊含义的单词，它们是语言的一部分，不能用作标识符。例如，int、if、else等。</li><li>**标识符（Identifiers）：**标识符是由字母、数字和下划线组成的名称，用于标识变量、函数等。标识符需要遵循一些命名规则，比如不能以数字开头。</li><li>**常量（Constants）：**常量是固定的值，分为整数常量、浮点数常量、字符常量等。</li><li>**字符串文字（String Literals）：**字符串文字是由字符组成的序列，用双引号括起来。</li><li>**运算符（Operators）：**运算符用于执行各种操作，如加法、减法、乘法、除法等。</li><li>**特殊符号（Special Symbols）：**括花括号{}，方括号[]，括号()，分号;等。</li></ul><h2 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 📜 注释</h2><p>C语言有两种注释方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 单行注释</span><br><br><span class="hljs-comment">/* 单行注释 */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  多行注释</span><br><span class="hljs-comment">  多行注释</span><br><span class="hljs-comment">  多行注释</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>注意：不能在注释内嵌套注释，注释也不能出现在字符串或字符值中</p><h2 id="️-标识符"><a class="markdownIt-Anchor" href="#️-标识符"></a> 🖇️ 标识符</h2><p>C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。</p><ul><li><em><strong>以字母<code>A-Z</code>或<code>a-z</code>或下划线<code>_</code>开始</strong></em></li><li><em><strong>只能由字母、数字、下划线组成</strong></em></li><li><em><strong>不允许出现标点符号，比如@、$和%等</strong></em></li><li><em><strong>C语言是区分大小写的编程语言</strong></em></li></ul><h2 id="关键字"><a class="markdownIt-Anchor" href="#关键字"></a> 📌 关键字</h2><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>auto</td><td>声明自动变量</td></tr><tr><td>break</td><td>跳出当前循环</td></tr><tr><td>case</td><td>开关语句分支</td></tr><tr><td>char</td><td>声明字符型变量或函数返回值类型</td></tr><tr><td>const</td><td>定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变</td></tr><tr><td>continue</td><td>结束当前循环，开始下一轮循环</td></tr><tr><td>default</td><td>开关语句中的&quot;其它&quot;分支</td></tr><tr><td>do</td><td>循环语句的循环体</td></tr><tr><td>double</td><td>声明双精度浮点型变量或函数返回值类型</td></tr><tr><td>else</td><td>条件语句否定分支（与 if 连用）</td></tr><tr><td>enum</td><td>声明枚举类型</td></tr><tr><td>extern</td><td>声明变量或函数是在其它文件或本文件的其他位置定义</td></tr><tr><td>float</td><td>声明浮点型变量或函数返回值类型</td></tr><tr><td>for</td><td>一种循环语句</td></tr><tr><td>goto</td><td>无条件跳转语句</td></tr><tr><td>if</td><td>条件语句</td></tr><tr><td>int</td><td>声明整型变量或函数</td></tr><tr><td>long</td><td>声明长整型变量或函数返回值类型</td></tr><tr><td>register</td><td>声明寄存器变量</td></tr><tr><td>return</td><td>子程序返回语句（可以带参数，也可不带参数）</td></tr><tr><td>short</td><td>声明短整型变量或函数</td></tr><tr><td>signed</td><td>声明有符号类型变量或函数</td></tr><tr><td>sizeof</td><td>计算数据类型或变量长度（即所占字节数）</td></tr><tr><td>static</td><td>声明静态变量</td></tr><tr><td>struct</td><td>声明结构体类型</td></tr><tr><td>switch</td><td>用于开关语句</td></tr><tr><td>typedef</td><td>用以给数据类型取别名</td></tr><tr><td>unsigned</td><td>声明无符号类型变量或函数</td></tr><tr><td>union</td><td>声明共用体类型</td></tr><tr><td>void</td><td>声明函数无返回值或无参数，声明无类型指针</td></tr><tr><td>volatile</td><td>说明变量在程序执行中可被隐含地改变</td></tr><tr><td>while</td><td>循环语句的循环条件</td></tr></tbody></table><h2 id="️-c语言中的空格"><a class="markdownIt-Anchor" href="#️-c语言中的空格"></a> 🕸️ C语言中的空格</h2><p>只包含空格的行，被称为空白行，可能带有注释，C编译器会完全忽略它。</p><p>在C中，空格用于描述空白符、制表符、换行符和注释。空格分隔语句的各个部分，让编译器能识别语句中的某个元素（比如<code>int</code>）在哪里结束，下一个元素在哪里开始。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> number1 = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 局部变量</span><br><span class="hljs-type">int</span> number2 = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 局部变量</span><br><span class="hljs-type">int</span> sum = number1 + number2;  <span class="hljs-comment">// 局部变量</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>其中<code>int number1</code>间的空格是为了分割语句，同样的还有<code>int number2</code>和<code>int sum</code>。</p><p>而<code>number1 = 0</code>间的空格是为了增加代码可读性，适当加一些空格。一般会间隔一个空格，同样的还有<code>number2 = 0</code>、<code>sum = number1 + number2</code>和<code>  // 局部变量</code>。</p>          </div>]]></content>
    
    
    <summary type="html">笔者将会在这篇文章中介绍C语言的其他基本的构建块，包括令牌（Token）、语句结束符、注释、标识符和关键字。这些是我们开始学习编写C语言程序代码的基础。</summary>
    
    
    
    <category term="C Language" scheme="http://example.com/categories/C-Language/"/>
    
    <category term="基础知识" scheme="http://example.com/categories/C-Language/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="C Language" scheme="http://example.com/tags/C-Language/"/>
    
    <category term="Programming" scheme="http://example.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>C语言的程序结构</title>
    <link href="http://example.com/2023/12/21/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2023/12/21/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</id>
    <published>2023-12-21T01:14:10.728Z</published>
    <updated>2023-12-21T01:14:10.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序结构"><a class="markdownIt-Anchor" href="#程序结构"></a> 🗿 程序结构</h1><h2 id="introduce"><a class="markdownIt-Anchor" href="#introduce"></a> 📚  Introduce</h2><p>在C语言中，程序主要包括：</p><ul><li><a href="#header">头文件（Header Files）</a></li><li><a href="#preprocessor">预处理指令（Preprocessor Directives）</a></li><li><a href="#global">全局声明（Global Declarations）</a></li><li><a href="#main">main函数（main function）</a></li><li><a href="#local">局部声明（Local Declarations）</a></li><li><a href="#statement">语句和表达式（Statements and Expressions）</a></li><li><a href="#control">控制结构（Control Structures）</a></li><li><a href="#definition">函数定义（Function Definitions）</a></li></ul><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> 📖 Code</h2><blockquote><p>下面是一个简单的C语言程序示例，先通过示例简单了解：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  <span class="hljs-comment">// 预处理指令和头文件</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;  <span class="hljs-comment">// 函数原型声明 函数声明</span><br><br><span class="hljs-type">int</span> globalVar = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 全局变量声明即全局声明</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>  <span class="hljs-comment">// main函数</span><br>&#123;<br>    <span class="hljs-type">int</span> localVar = <span class="hljs-number">5</span>;  <span class="hljs-comment">// 局部变量声明即局部声明</span><br><br>    greet();  <span class="hljs-comment">// 调用函数</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sum: %d\n&quot;</span>, globalVar + localVar);  <span class="hljs-comment">// 执行语句和表达式</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 函数定义</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World!\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="explain"><a class="markdownIt-Anchor" href="#explain"></a> 📝 Explain</h2><div class="note note-info">            <p><a id="header" style="text-decoration: none;color: inherit;">头文件（Header Files）</a></p>          </div><p>头文件包含了一些预处理指令，用于引入系统库或自定义库的声明。例如，<code>#include &lt;stdio.h&gt;</code>用于引入标准输入输出库。</p><div class="note note-info">            <p><a id="preprocessor" style="text-decoration: none;color: inherit;">预处理指令（Preprocessor Directives）</a></p>          </div><p>在头文件中，通常包含一些预处理指令，如<code>#define</code>、<code>#ifdef</code>、<code>#ifndef</code>等。这些指令在编译前由预处理器处理。</p><div class="note note-info">            <p><a id="gloal" style="text-decoration: none;color: inherit;">全局声明（Global Declarations）</a></p>          </div><p>在主函数之外声明全局变量和函数原型。全局变量和函数原型的声明可以放在头文件中。</p><div class="note note-info">            <p><a id="main" style="text-decoration: none;color: inherit;">main函数（main function）</a></p>          </div><p>所有的C程序都必须包含一个<code>main</code>函数，它是程序的入口。程序从<code>main</code>函数开始执行。</p><div class="note note-info">            <p><a id="local" style="text-decoration: none;color: inherit;">局部声明（Local Declarations）</a></p>          </div><p>在<code>main</code>函数或其他函数内部，可以声明局部变量。局部变量只在声明它的函数内部可见。</p><div class="note note-info">            <p><a id="statement" style="text-decoration: none;color: inherit;">语句和表达式（Statements and Expressions）</a></p>          </div><p>C程序由一系列语句和表达式组成。语句是执行某种操作的代码块，而表达式则是产生一个值的代码片段。</p><div class="note note-info">            <p><a id="control" style="text-decoration: none;color: inherit;">控制结构（Control Structures）</a></p>          </div><p>C语言提供了一些控制结构，如条件语句（<code>if</code>、<code>else</code>）、循环语句（<code>for</code>、<code>while</code>）和跳转语句（<code>break</code>、<code>continue</code>、<code>return</code>）。</p><div class="note note-info">            <p><a id="definition" style="text-decoration: none;color: inherit;">函数定义（Function Definitions）</a></p>          </div><p>除了<code>main</code>函数之外，程序可能包含其他自定义函数。函数的定义包括函数名、返回类型、参数列表和函数体。</p><h2 id="️-create"><a class="markdownIt-Anchor" href="#️-create"></a> ⌨️ Create</h2><p>通过以下步骤可以完成一个源程序的编写、编译并运行：</p><ol><li><p>打开一个文本编辑器，编写代码。</p></li><li><p>保存文件，文件以<code>.c</code>为拓展名。</p></li><li><p>打开终端（terminal），使用<code>cd</code>命令进入源代码文件所在目录。</p></li><li><p>输入<code>gcc 文件名.c</code>，回车确定，编译代码。</p></li><li><p>如果代码没有错误，会生成<code>a.out</code>可执行文件。（在Windows中，生成的是a.exe。可执行文件默认名称为a）</p></li><li><p>输入<code>./a.out</code>执行文件。</p></li></ol><div class="note note-info">            <p>这部分会涉及到如何使用终端命令，大家会在<code>Linux</code>的学习中了解更多。</p>          </div><ul><li>使用<code>gcc 文件名.c -o 文件名.out</code>可以自定义可执行文件名称。</li><li>也可以使用<code>gcc 文件名1.c 文件名2.c -o 文件名.out</code>编译多个文件。</li></ul><h3 id="️-compile"><a class="markdownIt-Anchor" href="#️-compile"></a> 🛠️ Compile</h3><p>在以上步骤中，有关<code>gcc</code>命令的作用就是编译源码，生成可执行文件。</p><blockquote><p><code>gcc</code> 是 GNU Compiler Collection（GNU编译器集合）的缩写，是一套开源的编程语言编译器。它支持多种编程语言，其中最为广泛使用的是 C、C++ 和 Fortran。下面是 <code>gcc</code>编译 C 文件的基本步骤：</p><ol><li>**预处理（Preprocessing）：**首先，<code>gcc</code> 使用预处理器（通常是 <code>cpp</code>，C Preprocessor）对源文件进行预处理。预处理器执行一些预处理指令，例如 <code>#include</code> 将头文件内容嵌入源文件，<code>#define</code> 进行宏替换，以及条件编译等。</li><li>**编译（Compilation）：**经过预处理的源文件被送入编译器，对其进行词法分析、语法分析和语义分析，生成相应的中间代码（通常是汇编代码）。</li><li>**汇编（Assembly）：**生成的中间代码被汇编成目标文件。目标文件包含了特定硬件体系结构的机器代码。</li><li>**链接（Linking）：**如果程序包含多个源文件，编译器会生成多个目标文件。链接器（<code>ld</code>）将这些目标文件以及可能的库文件链接在一起，生成最终的可执行文件。链接器解决符号引用，合并代码和数据段，并生成程序入口地址。</li><li>**生成可执行文件（Executable）：**最后，链接器生成的可执行文件包含了程序的机器代码和必要的元信息，可以被操作系统加载并执行。</li></ol></blockquote><p>在命令行中，一般使用以下命令来编译一个简单的 C 程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc source_file.c -o output_executable<br></code></pre></td></tr></table></figure><h3 id="️-execute"><a class="markdownIt-Anchor" href="#️-execute"></a> ⚙️ Execute</h3><h4 id="在linux和macos上执行"><a class="markdownIt-Anchor" href="#在linux和macos上执行"></a> 在<code>Linux</code>和<code>MacOS</code>上执行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">其中，executable_name 是你的可执行文件的名称</span><br>./executable_name<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">确保在执行前已经给予执行权限</span><br>chmod +x executable_name<br></code></pre></td></tr></table></figure><h4 id="在windows上执行"><a class="markdownIt-Anchor" href="#在windows上执行"></a> 在<code>Windows</code>上执行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">executable_name.exe<br></code></pre></td></tr></table></figure><p>或双击exe文件</p>]]></content>
    
    
    <summary type="html">笔者将会在本文中介绍C语言的程序结构，通过一个示例简单了解，在以后的学习过程中会有更多的思考。除此之外，笔者还简单介绍了C语言程序的编译和执行，不要小看这部分，这可以帮我们更好的了解计算机。</summary>
    
    
    
    <category term="C Language" scheme="http://example.com/categories/C-Language/"/>
    
    <category term="基础知识" scheme="http://example.com/categories/C-Language/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="C Language" scheme="http://example.com/tags/C-Language/"/>
    
    <category term="Programming" scheme="http://example.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>C Language Says Hello World</title>
    <link href="http://example.com/2023/12/18/C%20HelloWorld/"/>
    <id>http://example.com/2023/12/18/C%20HelloWorld/</id>
    <published>2023-12-18T13:47:19.000Z</published>
    <updated>2023-12-20T08:36:40.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world"></a> 🗿Hello World!</h1><blockquote><p>笔者会先展示代码，再分析它的构成。我们即将踏进一个伟大编程语言的世界！</p></blockquote><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> 📖 Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">/*Here is my code*/</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="explain"><a class="markdownIt-Anchor" href="#explain"></a> 📝 Explain</h2><ol><li><p><code>#include&lt;stdio.h&gt;</code></p><ul><li><code>#include</code>是一个预处理命令，用来引入头文件</li><li><code>stdio.h</code>是一个头文件（标准输入输出文件）</li></ul><p>简单来说，头文件相当于一个工具箱，我们选择需要使用的工具箱，这样就可以在我们之后的工作（代码）中进行使用</p></li><li><p><code>int main() &#123;&#125;</code></p><ul><li><code>int</code>表示该<code>main()</code>函数的返回类型是整型数据，在数据类型以及函数章节会详细介绍。</li><li><code>main()</code>表示一个名为<code>main</code>的函数，在函数章节会函数章节会详细介绍。</li><li><code>&#123;&#125;</code>表示函数的代码块，描述的是函数的功能</li></ul><p><mark>提醒：在C语言中，所有的程序都要包含<code>main()</code>函数，代码从<code>main</code>函数执行。</mark></p></li><li><p><code>/*Here is my code*/</code></p><ul><li><code>/**/</code>包含的是注释说明，程序不会执行，可以有效提高代码的可读性。</li></ul></li><li><p><code>printf(&quot;Hello World!\n&quot;);</code></p><ul><li><p><code>printf()</code>函数在<code>stdio.h</code>头文件中声明，用于格式化输出到屏幕。</p></li><li><p><code>&quot;Hello World!\n&quot;</code>是一串字符串，<code>\n</code>是转义字符，表示换行。</p></li><li><p>在C语言中，每个语句都要使用语句结束符（分号<code>;</code>）作为结束标志。</p></li><li><p><code>retrun 0;</code>对应返回类型。在这里，返回类型是<code>int</code>，所以返回一个0表示退出程序。</p></li></ul></li></ol><h2 id="️-history"><a class="markdownIt-Anchor" href="#️-history"></a> 📽️ History</h2><p>C语言是一门通用的、过程式编程语言，由美国计算机科学家Dennis Ritchie于1972年至1973年之间在贝尔实验室（Bell Labs）设计和实现。以下是C语言的主要历史里程碑：</p><ol><li><strong>起源和发展：</strong> C语言的设计始于1969年，当时Dennis Ritchie和Ken Thompson在贝尔实验室为新的Unix操作系统开发一种新的高级编程语言。C语言是由B语言演变而来，而B语言又是由BCPL语言演变而来。因此，C语言继承了一些B语言的特性，但也引入了新的概念和语法。</li><li><strong>发布：</strong> C语言首次正式亮相是在1972年，当时Dennis Ritchie与Brian Kernighan合作，在《贝尔系统技术杂志》上发表了一篇名为《The C Programming Language》的文章，介绍了C语言的基本概念和语法。</li><li><strong>C语言的标准化：</strong> 随着C语言的发展，为了促进跨平台和可移植性，于1983年发布了第一个C语言标准，即ANSI C（American National Standards Institute C）。后来，国际标准化组织（ISO）也发布了与ANSI C兼容的标准，被称为ISO C。</li><li><strong>流行和广泛应用：</strong> 由于其简洁、高效和可移植的特性，C语言在计算机科学领域变得非常流行。它成为了许多系统软件、嵌入式系统和底层编程的首选语言。许多其他编程语言（如C++、Objective-C、C#等）都受到了C语言的影响。</li><li><strong>发展为C++：</strong> 在C语言的基础上，Bjarne Stroustrup于1983年推出了C++，将面向对象编程的概念引入了C语言，使之成为一门更为强大和灵活的编程语言。</li></ol><p>C语言的影响深远，它不仅是许多其他编程语言的基础，而且仍然在系统编程、嵌入式系统和底层开发领域保持着强大的地位。</p>]]></content>
    
    
    <summary type="html">笔者上的第一节编程课就是用C语言写一段输出“Hello World”的代码，在很多的教学书籍中，第一章也是从“Hello World”开始。我希望大家一直都保持着“Hello World”的激情，无论是生活还是学习。</summary>
    
    
    
    <category term="C Language" scheme="http://example.com/categories/C-Language/"/>
    
    <category term="基础知识" scheme="http://example.com/categories/C-Language/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="C Language" scheme="http://example.com/tags/C-Language/"/>
    
    <category term="Programming" scheme="http://example.com/tags/Programming/"/>
    
    <category term="Hello World" scheme="http://example.com/tags/Hello-World/"/>
    
  </entry>
  
</feed>
